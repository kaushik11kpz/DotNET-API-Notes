Security Overview
-Achieve Security in Web API
-Authentication and Authorization makes our Web APIs and application more secure

-Authentication is all about validating the identity of an end user(valid credentials)
-Does the user is authenticated enough to use our resources?
-Token based Authentication technique is used here to achieve authentication in Web API

-Authorization is considered as a second step of authentication to achieve security
-What all permissions the authenticated user has to access web resources
-Is the user allowed to access/perform action on that resource?
-This could be achieved by setting roles and permissions for an end user who is authenticated
OR
-It can be achieved through providing a secure token,using which an end user can have access to other services or resources

-In this module, our goal is to secure the Rest API via token based authentication


Register Method
-Create a UsersController for Register and Login
-Add CinemaDbContext property as private and a constructor with CinemaDbContext parameter
-Create IActionResult type Register Method
-If the parameter are same in ActionMethod, then we need to use attribute Routing
-If multiple methods are of same ActionMethod, add the action method to route Url

-First we check if multiple user are trying to register with same email Id
-Role based Authoriation is needed as according to Role Based Authorization users are allowed to access our client side of the application
and the admins are allowed to access the admin side of the application
-Return status code if successfully registered


Hashing Password
-When we pass the password from Register, it is stored in the database, if someoness gets access to our database, then he will get
the passwords of all the users.
-The solutions for this is Hashing Password before storing in database
-Install AspNetCore.Authentication.Plugin from nuget packet manager
-In Register method where the user object is created, allocate the Password field from object using
this  Password = SecurePasswordHasherHelper.Hash(user.Password)
This one line will convert plain text format of Password into Hashstring


JWT Overview
-JWT- Json Web Token
-Open standard
-Why we need JWT, because it is used to securely transmit information between information
-It is preffered as it is digitally signed, it means information is verified and trusted and there is no alteration of data between transmissions
-JWT Structure aaaaaaaaaaaa.bbbbbbbbbbbbbbbbb.cccccccccc
               Header       Payload           Signature
-Header - It contains Algo & Type
-Payload - It contains claim
Claims are user details and additional metdata like expiry date of the token, runtime password, etc.
-Signature - Most important part
           - We need to pass Header and Payload inside Signature
           - Our header is concatenated with payload then it will use a secret key and generate a Signature by using algorithm
           - This Signature provides more security
           - After combining all these things we will get JWT

-How JWT works
-Suppose you have a client and server
-The clients want to access some protected data on the server but server knows that client cannot be trusted. It only want to pass data to trusted client
-Thus, Client sends the request to the server with credentials to verify who it is
-If client data is valid then server will accept it and server will create a token and this token is returened to the client
-Now next time if client want to access resources, he will just send token along with API request, for server to check and verify the token 
-If token is verified and not been tampered with then server will grant the resources to the client or else server will return Unauthorized message to client
-Now to implement Authorization inside ASP.NET Core Web API


Implementing JWT support in .Net Core
-In order to secure Web API we need AspNetCore.Authentication.Plugin from nuget packet manager
-We will use this package again to generate JWT(Json Web Token)
-Go to the documentation of the package in authentication section
-7 steps are present there which are needed to secure our Web API
-Step 1- Install plugin
-Step 2- Add Authentication service in COnfigureServices of Startup class
-Step 3- Add the related namepsaces
-Step 4- use app.UseAuthentication() in Configure method before app.UseAuthorization() of the Starup class 
-Step 5- Add Tokens to appsettings.json file
       - Key property is used by the api to sign and verify JWT tokens for authentication, you can update with your own random string to ensure nobody else can generate a JWT to 
gain unauthorised access to your application 
       - AccessExpireSeconds property is used to seconds for expiration of token
-Step 6- pass IConfiguration and AuthService as private fields in Controller and add Iconfiguration inside constructor's controller
-Step 7- Register the claimes(A login method is required for it first)


Login Method
-How to implement login functionaity
-How to get Json Web Token
-We need a login method which is a Post Request
-It will take a user object, we will just provide email and password to this user object
-Inside this method we will get user record from the database according to the email, if no record found according to email, we will return not found status code
-If userEmail is found, then we will verify the user password
-If the user password and hash password does not match, we will return unauthorized status code
-If the user password and hasg password match, then we will add the claims and generate the token
-We will user Validate hashing Password function to validate the password coming from the user
-To generate JWT
-we implement step 7 of the above topic
-we register the claims, use that claims to generate token and display the token in json format using a specific code from the Authentication documentation
-Check using the Postman


Protecting Routes
-To protect the routes from the Unauthorized access
-In Controller, we add the [Authorize] attribute, if we want to protect all the methods of that particular controller
-If we want to protect a single or two method inside a Controller of many method, we just add [Authoriz] attribute to that specific methods
-If we want to protect all the Controller method except one , we add [Authorize[ attribute to controller and [AllowAnonymous] to that method, which needed to be exposed

-Now the question is how we will allow the trusted/authorized users to use protected Web API routes?
-The answer is, JWT(Json Web Token)


Use Access Token
-In the Login method lesson, we got acces tokens(JWT)
-In this lesson we going to utilize access token to authorize the resources
-In order to access the [Authorize] attribute method of Controller, we need to use access token
-To do this
-In the Postman, select the get request and specify the exact url 
-Along with it, go to the Header of that get request, add Authorization as Key and and token-type - "bearer" as value along with access token


Role Based Authorization
-What is Role based Authorization and why we need it?
-Role based authorization is basically a type of authorization in which we specify some particular roles
-For examples, we have two applications, the one is used to reserve the cinema ticket and the other which is used to tell which user has reserved the cinama ticket
-That is, Client Side app for Cliend and Admin Side app for Admin
-This will be achieved via Role Based Authorization
-Lets implement Role Based Authorization
-Sample controller is used here for Role Based Authorization learning and later it will be deleted
-We add [Authorize(Role = "Admin")] attribute for only admin to access this method, no other user can access it event with access token
-Now, how to define an admin of this application
-How to make a user admin
-Lets edit the role of new user as "Admin" in data, make sure the spelling of Admin is same in database as in Controller
-Currently the access token that we got is generic means anyone with a valid access token can access our API endpoints
-But remember, we only want to give access to the user if the roles are specified inside the database
-For example, if the role inside the database is User, then we will get the access token with user roles and if the role inside database is admin, then we will get the access token for admin
-So, to get the access token with respect to the roles, we need to add something inside the login method
-In login method we will add a new claim and inside this we will add the Claims for Roles and then in the value, we will pass the role property that is comin from database
-Go the login in Post request and enter the details of the user and you will get access token specified to role
-Now use this access token in controller to access admin method by using a GET requestaling with exact url and in request Header choose Authorizationa and in value type "bearer" and 
copy the acces token, the admin authorized method will be accessible
-We can also restrict admin to access the User side method by using  [Authorize(Roles = "User")] attribute on specified method
-This way we can add Role Based Authorization inside our Web API




